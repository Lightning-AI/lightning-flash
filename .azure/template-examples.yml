jobs:
  - ${{ each topic in parameters.domains }}:
    - job:
      displayName: "domain ${{topic}} with 2 GPU"
      # how long to run the job before automatically cancelling
      timeoutInMinutes: "45"
      # how much time to give 'run always even if cancelled tasks' before stopping them
      cancelTimeoutInMinutes: "2"

      pool: "lit-rtx-3090"
      variables:
        DEVICES: $( python -c 'print("$(Agent.Name)".split("_")[-1])' )

      # this need to have installed docker in the base image...
      container:
        # base ML image: mcr.microsoft.com/azureml/openmpi3.1.2-cuda10.2-cudnn8-ubuntu18.04
        image: "pytorchlightning/pytorch_lightning:base-cuda-py3.9-torch1.11"
        # image: "pytorch/pytorch:1.8.1-cuda11.0-cudnn8-runtime"
        options: "-it --rm --gpus=all --shm-size=16g"

      workspace:
        clean: all
      steps:

      - bash: echo "##vso[task.setvariable variable=CUDA_VISIBLE_DEVICES]$(DEVICES)"
        displayName: 'set visible devices'

      - bash: |
          echo $CUDA_VISIBLE_DEVICES
          lspci | egrep 'VGA|3D'
          whereis nvidia
          nvidia-smi
          pip --version
          pip list
          df -kh /dev/shm
        displayName: 'Image info & NVIDIA'

      - bash: |
          python -c "import torch ; mgpu = torch.cuda.device_count() ; assert mgpu >= 2, f'GPU: {mgpu}'"
        displayName: 'Sanity check'

      - bash: |
          pip install '.[${{topic}},test]' -r requirements/testing_${{topic}}.txt -U --prefer-binary
          pip list
        env:
          FREEZE_REQUIREMENTS: 1
        displayName: 'Install dependencies'

      - bash: python -m coverage run --source flash -m pytest tests --durations=30
        displayName: 'Testing'

      - bash: |
          python -m coverage report
          python -m coverage xml
          # python -m codecov --token=$(CODECOV_TOKEN) --commit=$(Build.SourceVersion) --flags=gpu,pytest --name="GPU-coverage" --env=linux,azure
          ls -l
        displayName: 'Statistics'

      - task: PublishCodeCoverageResults@1
        displayName: 'Publish coverage report'
        inputs:
          codeCoverageTool: 'cobertura'
          summaryFileLocation: 'coverage.xml'
          reportDirectory: '$(Build.SourcesDirectory)/htmlcov'
          testRunTitle: '$(Agent.OS) - $(Build.BuildNumber)[$(Agent.JobName)] - Python $(python.version)'
        condition: succeededOrFailed()
