from copy import deepcopy
from inspect import signature
from typing import Any, Callable, Optional, TYPE_CHECKING

import torch
from pytorch_lightning.trainer.states import RunningStage
from pytorch_lightning.utilities.warning_utils import rank_zero_warn

from flash.data.process import Preprocess

if TYPE_CHECKING:
    from flash.data.data_pipeline import DataPipeline


class AutoDataset(torch.utils.data.Dataset):

    FITTING_STAGES = ("train", "val")
    # Todo: Resolve this on Lightning side
    STAGES = ("train", "test", "eval", "val", "predict")

    def __init__(
        self,
        data: Any,
        load_data: Optional[Callable] = None,
        load_sample: Optional[Callable] = None,
        data_pipeline: Optional['DataPipeline'] = None,
        running_stage: Optional[RunningStage] = None
    ) -> None:
        super().__init__()

        if load_data is not None or load_sample is not None:
            if data_pipeline is not None:
                rank_zero_warn(
                    "datapipeline is specified but load_sample and/or load_data are also specified. "
                    "Won't use datapipeline"
                )
        # initial states
        self._load_data_called = False
        self._running_stage = None

        self.data = data
        self.data_pipeline = data_pipeline
        self.load_data = load_data
        self.load_sample = load_sample

        # trigger the setup only if `running_stage` is provided
        self.running_stage = running_stage

    @property
    def running_stage(self) -> Optional[RunningStage]:
        return self._running_stage

    @running_stage.setter
    def running_stage(self, running_stage):
        if self._running_stage != running_stage:
            self._running_stage = running_stage
            self._setup(running_stage)

    def _call_load_data(self, data):
        if len(signature(self.load_data).parameters) > 1:
            return self.load_data(data, self)
        else:
            return self.load_data(data)

    def _call_load_sample(self, sample):
        if len(signature(self.load_sample).parameters) > 1:
            return self.load_sample(sample, self)
        else:
            return self.load_sample(sample)

    def _setup(self, stage: RunningStage):
        assert stage is None or stage.value in self.STAGES
        old_load_data = self.load_data.__code__ if self.load_data is not None else None

        if (
            self._running_stage is not None and self.data_pipeline is not None
            and (self.load_data is None or self.load_sample is None) and stage is not None
        ):
            self.load_data = getattr(
                self.data_pipeline._preprocess_pipeline,
                self.data_pipeline._resolve_function_hierarchy(
                    'load_data', self.data_pipeline._preprocess_pipeline, stage, Preprocess
                )
            )
            self.load_sample = getattr(
                self.data_pipeline._preprocess_pipeline,
                self.data_pipeline._resolve_function_hierarchy(
                    'load_sample', self.data_pipeline._preprocess_pipeline, stage, Preprocess
                )
            )
        if self.load_data is not None and (old_load_data != self.load_data.__code__ or not self._load_data_called):
            if old_load_data is not None:
                rank_zero_warn(
                    "The load_data function of the Autogenerated Dataset changed. "
                    "This is not expected! Preloading Data again to ensure compatibility. This may take some time."
                )
            self._preprocessed_data = self._call_load_data(self.data)
            self._load_data_called = True

    def __getitem__(self, index: int) -> Any:
        if self.load_sample is None and self.load_data is None:
            raise RuntimeError(
                "Names for LoadSample and LoadData could not be inferred."
                " Consider setting the RunningStage"
            )
        if self.load_sample is not None:
            return self._call_load_sample(self._preprocessed_data[index])
        else:
            return self._preprocessed_data[index]

    def __len__(self) -> int:
        return len(self._preprocessed_data)
